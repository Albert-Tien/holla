// Generated by CoffeeScript 1.4.0
(function() {
  var IceCandidate, MediaStream, PeerConnection, SessionDescription, URL, attachStream, browser, getUserMedia, processSDP, shim, supported,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  PeerConnection = window.PeerConnection || window.webkitPeerConnection00 || window.webkitRTCPeerConnection || window.mozRTCPeerConnection;

  IceCandidate = window.RTCIceCandidate || window.mozRTCIceCandidate;

  SessionDescription = window.mozRTCSessionDescription || window.RTCSessionDescription;

  MediaStream = window.webkitMediaStream || window.MediaStream;

  getUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia).bind(navigator);

  URL = window.URL || window.webkitURL || window.msURL || window.oURL;

  browser = (navigator.mozGetUserMedia ? 'firefox' : 'chrome');

  supported = (PeerConnection != null) && (getUserMedia != null);

  processSDP = function(sdp) {
    var addCrypto, line, out, _i, _len, _ref;
    if (browser !== 'mozilla') {
      return sdp;
    }
    addCrypto = "a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
    out = [];
    _ref = sdp.split('\r\n');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i];
      out.push(line);
      if ((__indexOf.call(search, 'm=') >= 0) !== -1) {
        out.push(addCrypto);
      }
    }
    return out.join('\r\n');
  };

  attachStream = function(uri, el) {
    var e, srcAttr, _i, _len;
    srcAttr = (browser === 'mozilla' ? 'mozSrcObject' : 'src');
    if (typeof el === "string") {
      return attachStream(uri, document.getElementById(el));
    } else if (el.jquery) {
      el.attr(srcAttr, uri);
      for (_i = 0, _len = el.length; _i < _len; _i++) {
        e = el[_i];
        e.play();
      }
    } else {
      el[srcAttr] = uri;
      el.play();
    }
    return el;
  };

  shim = function() {
    var PeerConnConfig, out;
    if (!supported) {
      return;
    }
    if (browser === 'mozilla') {
      PeerConnConfig = {
        iceServers: [
          {
            url: "stun:23.21.150.121"
          }
        ],
        optional: []
      };
      MediaStream.prototype.getVideoTracks = function() {
        return [];
      };
      MediaStream.prototype.getAudioTracks = function() {
        return [];
      };
    } else {
      PeerConnConfig = {
        iceServers: [
          {
            url: "stun:stun.l.google.com:19302"
          }
        ],
        optional: [
          {
            DtlsSrtpKeyAgreement: true
          }
        ]
      };
      if (MediaStream.prototype.getVideoTracks) {
        MediaStream.prototype.getVideoTracks = function() {
          return this.videoTracks;
        };
        MediaStream.prototype.getAudioTracks = function() {
          return this.audioTracks;
        };
      }
      if (PeerConnection.prototype.getLocalStreams) {
        PeerConnection.prototype.getLocalStreams = function() {
          return this.localStreams;
        };
        PeerConnection.prototype.getRemoteStreams = function() {
          return this.remoteStreams;
        };
      }
    }
    out = {
      PeerConnection: PeerConnection,
      IceCandidate: IceCandidate,
      SessionDescription: SessionDescription,
      MediaStream: MediaStream,
      getUserMedia: getUserMedia,
      URL: URL,
      attachStream: attachStream,
      processSDP: processSDP,
      PeerConnConfig: PeerConnConfig,
      supported: supported
    };
    return out;
  };

  module.exports = shim();

}).call(this);
