// Generated by CoffeeScript 1.6.2
(function() {
  var Call, Emitter, User, shims,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  shims = require('./shims');

  Emitter = require('emitter');

  User = (function(_super) {
    __extends(User, _super);

    function User(call, name) {
      this.call = call;
      this.name = name;
    }

    User.prototype.ready = function(fn) {};

    return User;

  })(Emitter);

  Call = (function(_super) {
    __extends(Call, _super);

    function Call(client, id, callerName) {
      this.client = client;
      this.id = id;
      this._handleUserResponse = __bind(this._handleUserResponse, this);
      this.unmute = __bind(this.unmute, this);
      this.mute = __bind(this.mute, this);
      this.releaseLocalStream = __bind(this.releaseLocalStream, this);
      this.setLocalStream = __bind(this.setLocalStream, this);
      this.add = __bind(this.add, this);
      this.decline = __bind(this.decline, this);
      this.answer = __bind(this.answer, this);
      this._users = {};
      if (callerName) {
        this.caller = new User(this, callerName);
        this._users[callerName] = this.caller;
      }
    }

    Call.prototype.answer = function() {
      this.client.io.emit("" + this.id + ":callResponse", true);
      this.client.emit("callAnswered", this);
      return this;
    };

    Call.prototype.decline = function() {
      this.client.io.emit("" + this.id + ":callResponse", false);
      this.client.emit("callDeclined", this);
      return this;
    };

    Call.prototype.add = function(name) {
      var newUser;

      newUser = new User(this, name);
      this._users[name] = newUser;
      this.client.io.emit("addUser", this.id, name, this._handleUserResponse(newUser));
      return this._users[name];
    };

    Call.prototype.user = function(name) {
      return this._users[name];
    };

    Call.prototype.users = function(name) {
      return this._users;
    };

    Call.prototype.setLocalStream = function(stream) {
      this.localStream = stream;
      return this;
    };

    Call.prototype.releaseLocalStream = function() {
      this.localStream.stop();
      delete this.localStream;
      return this;
    };

    Call.prototype.mute = function() {
      var track, _i, _len, _ref;

      if (!this.localStream) {
        return this;
      }
      _ref = this.localStream.getAudioTracks();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        track.enabled = false;
      }
      return this;
    };

    Call.prototype.unmute = function() {
      var track, _i, _len, _ref;

      if (!this.localStream) {
        return this;
      }
      _ref = this.localStream.getAudioTracks();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        track.enabled = true;
      }
      return this;
    };

    Call.prototype._handleUserResponse = function(user) {
      var _this = this;

      return function(err) {
        if (err != null) {
          if (err === "Call declined") {
            user.accepted = false;
            user.emit("declined");
            return _this.emit("userDeclined", _this._users[name]);
          } else {
            user.emit("error", err);
            return _this.emit("error", err);
          }
        } else {
          user.accepted = true;
          return user.emit("answered");
        }
      };
    };

    return Call;

  })(Emitter);

  module.exports = Call;

}).call(this);
