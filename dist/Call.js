// Generated by CoffeeScript 1.6.2
(function() {
  var Call, Emitter, User, shims,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  shims = require('./shims');

  Emitter = require('emitter');

  User = (function(_super) {
    __extends(User, _super);

    User.prototype.connection = null;

    function User(call, name) {
      this.call = call;
      this.name = name;
      this._handleRemoteCandidate = __bind(this._handleRemoteCandidate, this);
      this._handleRemoteSDP = __bind(this._handleRemoteSDP, this);
      this._handleError = __bind(this._handleError, this);
      this.createConnection();
      this.call.client.io.on("" + call.id + ":" + name + ":sdp", this._handleRemoteSDP);
      this.call.client.io.on("" + call.id + ":" + name + ":candidate", this._handleRemoteCandidate);
    }

    User.prototype.createConnection = function() {
      var _this = this;

      this.connection = new shims.PeerConnection(shims.PeerConnConfig, shims.constraints);
      this.connection.onconnecting = function() {
        return _this.emit("connecting");
      };
      this.connection.onopen = function() {
        return _this.emit("connected");
      };
      this.connection.onicecandidate = function(evt) {
        if ((evt != null ? evt.candidate : void 0) != null) {
          return _this.sendCandidate(evt.candidate);
        }
      };
      this.connection.onaddstream = function(evt) {
        return _this.addStream(evt.stream);
      };
      this.connection.onremovestream = function(evt) {
        return _this.removeStream();
      };
      return this;
    };

    User.prototype.addLocalStream = function(stream) {
      this.connection.addStream(stream);
      return this;
    };

    User.prototype.addStream = function(stream) {
      this._ready = true;
      this.stream = stream;
      this.emit("ready", this.stream);
      return this;
    };

    User.prototype.removeStream = function() {
      this.end();
      return this;
    };

    User.prototype.ready = function(fn) {
      if (this._ready) {
        fn(this.stream);
      } else {
        this.once('ready', fn);
      }
      return this;
    };

    User.prototype.sendCandidate = function(candidate) {
      return this.call.client.io.emit("sendCandidate", this.call.id, this.name, candidate, this._handleError);
    };

    User.prototype.sendOffer = function() {
      var done, err,
        _this = this;

      done = function(desc) {
        _this.connection.setLocalDescription(desc);
        desc.sdp = shims.processSDPOut(desc.sdp);
        return _this.call.client.io.emit("sendSDPOffer", _this.call.id, _this.name, desc, _this._handleError);
      };
      err = function(e) {
        return _this.emit("error", e);
      };
      this.connection.createOffer(done, err, shims.constraints);
      return this;
    };

    User.prototype.sendAnswer = function() {
      var done,
        _this = this;

      done = function(desc) {
        desc.sdp = shims.processSDPOut(desc.sdp);
        _this.connection.setLocalDescription(desc);
        return _this.call.client.io.emit("sendSDPAnswer", _this.call.id, _this.name, desc, _this._handleError);
      };
      this.connection.createAnswer(done, this._handleError, shims.constraints);
      return this;
    };

    User.prototype._handleError = function(e) {
      if (e != null) {
        return this.emit("error", e);
      }
    };

    User.prototype._handleRemoteSDP = function(desc) {
      var succ,
        _this = this;

      desc.sdp = shims.processSDPIn(desc.sdp);
      succ = function() {
        return _this.emit("sdp");
      };
      this.connection.setRemoteDescription(new shims.SessionDescription(desc), succ, this._handleError);
      return this;
    };

    User.prototype._handleRemoteCandidate = function(candidate) {
      this.emit("candidate", candidate);
      this.connection.addIceCandidate(new shims.IceCandidate(candidate));
      return this;
    };

    return User;

  })(Emitter);

  Call = (function(_super) {
    __extends(Call, _super);

    function Call(client, id, callerName) {
      var _this = this;

      this.client = client;
      this.id = id;
      this._handleUserResponse = __bind(this._handleUserResponse, this);
      this.unmute = __bind(this.unmute, this);
      this.mute = __bind(this.mute, this);
      this.releaseLocalStream = __bind(this.releaseLocalStream, this);
      this.setLocalStream = __bind(this.setLocalStream, this);
      this.add = __bind(this.add, this);
      this._add = __bind(this._add, this);
      this.decline = __bind(this.decline, this);
      this.answer = __bind(this.answer, this);
      this._users = {};
      if (callerName) {
        this._add(callerName);
        this.caller = this.user(callerName);
      }
      this.client.io.on("" + this.id + ":userAdded", function(name) {
        var user;

        _this._add(name);
        user = _this.user(name);
        console.log("userAdded", user);
        user.createConnection();
        user.addLocalStream(_this.localStream);
        return user.sendOffer();
      });
    }

    Call.prototype.answer = function() {
      if (!this.localStream) {
        throw new Error("Must call setLocalStream first");
      }
      this.client.io.emit("" + this.id + ":callResponse", true);
      this.client.emit("callAnswered", this);
      this.caller.createConnection();
      this.caller.addLocalStream(this.localStream);
      this.caller.once("sdp", this.caller.sendAnswer);
      return this;
    };

    Call.prototype.decline = function() {
      this.client.io.emit("" + this.id + ":callResponse", false);
      this.client.emit("callDeclined", this);
      return this;
    };

    Call.prototype._add = function(name) {
      var _base, _ref;

      if ((_ref = (_base = this._users)[name]) == null) {
        _base[name] = new User(this, name);
      }
      return this;
    };

    Call.prototype.add = function(name) {
      if (!this.localStream) {
        throw new Error("Must call setLocalStream first");
      }
      this._add(name);
      this.client.io.emit("addUser", this.id, name, this._handleUserResponse(this.user(name)));
      return this.user(name);
    };

    Call.prototype.user = function(name) {
      return this._users[name];
    };

    Call.prototype.users = function(name) {
      return this._users;
    };

    Call.prototype.setLocalStream = function(stream) {
      this.localStream = stream;
      return this;
    };

    Call.prototype.releaseLocalStream = function() {
      this.localStream.stop();
      delete this.localStream;
      return this;
    };

    Call.prototype.mute = function() {
      var track, _i, _len, _ref;

      if (!this.localStream) {
        throw new Error("Must call setLocalStream first");
      }
      _ref = this.localStream.getAudioTracks();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        track.enabled = false;
      }
      return this;
    };

    Call.prototype.unmute = function() {
      var track, _i, _len, _ref;

      if (!this.localStream) {
        throw new Error("Must call setLocalStream first");
      }
      _ref = this.localStream.getAudioTracks();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        track.enabled = true;
      }
      return this;
    };

    Call.prototype._handleUserResponse = function(user) {
      var _this = this;

      return function(err) {
        if (err != null) {
          if (err === "Call declined") {
            user.accepted = false;
            user.emit("declined");
            return _this.emit("userDeclined", user);
          } else {
            user.emit("error", err);
            return _this.emit("error", err);
          }
        } else {
          user.accepted = true;
          user.emit("answered");
          return _this.emit("userAnswered", user);
        }
      };
    };

    return Call;

  })(Emitter);

  module.exports = Call;

}).call(this);
