{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","tagline":"The easiest way to make apps using WebRTC","body":"![status](https://secure.travis-ci.org/wearefractal/holla.png?branch=master)\r\n\r\n## Information\r\n\r\n<table>\r\n<tr>\r\n<td>Package</td>\r\n<td>holla</td>\r\n</tr>\r\n<tr>\r\n<td>Description</td>\r\n<td>WebRTC Sugar</td>\r\n</tr>\r\n<tr>\r\n<td>Node Version</td>\r\n<td>>= 0.6</td>\r\n</tr>\r\n</table>\r\n\r\n## Example\r\n\r\n### Server\r\n\r\n```javascript\r\nvar holla = require('holla');\r\nvar server = http.createServer().listen(8080);\r\nvar rtc = holla.createServer(server);\r\n\r\nconsole.log('Server running on port 8080');\r\n```\r\nNote: Express 3 is no longer a httpServer so you need to do something like:  \r\n```javascript\r\nvar server = require('http').createServer(app).listen(8080);\r\n```\r\nbefore passing it to holla.createServer\r\n\r\n### Client\r\n\r\nSending a call:\r\n\r\n```javascript\r\nvar rtc = holla.connect();\r\nrtc.register(\"tom\", function(worked) {\r\n  holla.createFullStream(function(err, stream) {\r\n\r\n    var call = rtc.call(\"bob\");\r\n    call.addStream(stream);\r\n    holla.pipe(stream, $(\"#me\"));\r\n\r\n    call.on(\"answered\", function() {\r\n      console.log(\"Remote user answered the call\");\r\n    });\r\n\r\n    console.log(\"Calling \", call.user);\r\n  });\r\n});\r\n```\r\n\r\nReceiving a call:\r\n\r\n```javascript\r\nvar rtc = holla.connect();\r\nrtc.register(\"bob\", function(worked) {\r\n  rtc.on(\"call\", function(call) {\r\n    console.log(\"Inbound call from \", call.user);\r\n\r\n    holla.createFullStream(function(err, stream) {\r\n\r\n      call.addStream(stream);\r\n      call.answer();\r\n      holla.pipe(stream, $(\"#me\"));\r\n\r\n      call.ready(function(stream) {\r\n        holla.pipe(stream, $(\"#them\"));\r\n      });\r\n\r\n    });\r\n\r\n  });\r\n});\r\n```\r\n\r\n## Client\r\n\r\n### holla\r\n\r\n#### .supported\r\n\r\ntrue or false if WebRTC is supported in the browser\r\n\r\n#### .connect(host)\r\n\r\nTakes a host (http://site.com:8080) - defaults to window.location.href. Returns an RTC instance\r\n\r\n#### .pipe(stream, el)\r\n\r\nPipes a WebRTC video stream to a video element. el can be a string (id), jquery element, or dom node.\r\n\r\n#### .createStream(opt, cb)\r\n\r\nCreates a WebRTC stream - opt looks like ```{video:true,audio:true}``` depending on the stream you want. cb signature is ```(err, stream)```\r\n\r\n#### createFullStream(cb)\r\n\r\nSugar for ```.createStream({video:true,audio:true}, cb)```\r\n\r\n#### createVideoStream(cb)\r\n\r\nSugar for ```.createStream({video:true,audio:false}, cb)```\r\n\r\n#### createAudioStream(cb)\r\n\r\nSugar for ```.createStream({video:false,audio:true}, cb)```\r\n\r\n\r\n### RTC\r\n\r\n#### .register(name, cb)\r\n\r\nRegisters your connection with the server under a name. cb receives true or false if it worked. cb is optional.\r\n\r\n#### .call(name)\r\n\r\nCreates a call to user with name. Returns a Call instance\r\n\r\n#### .ready(fn)\r\n\r\nfn gets called when connection is registered or if it already has been.\r\n\r\n#### Events\r\n\r\nRTC will emit connected, authorized, disconnected, error, presence, and call events.\r\n\r\n\r\n### Call\r\n\r\n#### .isCaller\r\n\r\ntrue or false if you started this call.\r\n\r\n#### .user\r\n\r\nName of the user on the other end.\r\n\r\n#### .startTime\r\n\r\nDate of the call start.\r\n\r\n#### .endTime\r\n\r\nDate of the call end.\r\n\r\n#### .duration()\r\n\r\nDuration of the call.\r\n\r\n#### .addStream(stream)\r\n\r\nAdds your WebRTC stream to the call. Must be done before answering or sending a call.\r\n\r\n#### .chat(msg)\r\n\r\nSends a chat message\r\n\r\n#### .answer()\r\n\r\nAccepts the call (inbound only)\r\n\r\n#### .decline()\r\n\r\nDeclines the call (inbound only)\r\n\r\n#### .end()\r\n\r\nEnds the call (hangup and close connection)\r\n\r\n### .ready(fn)\r\n\r\nWill call fn when the call has been connected and is ready to go or if it is already.\r\n### Events\r\n\r\nCall will emit calling, connecting, connected, hangup, and chat events\r\n\r\n## Examples\r\n\r\nYou can view more examples in the [example folder.](https://github.com/wearefractal/holla/tree/master/examples)\r\n\r\n## Demo\r\n\r\nThere is a crappy demo up at [holla.jit.su](http://holla.jit.su)\r\n\r\n\r\n## LICENSE\r\n\r\n(MIT License)\r\n\r\nCopyright (c) 2012 Fractal <contact@wearefractal.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","name":"Holla"}